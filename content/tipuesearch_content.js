var tipuesearch = {"pages": [{'title': 'About', 'text': '工程師在解決問題之前, 會 先找資料 , 看看這些問題是否已經有人提出解決方案, 接著再 分析資料 是否能夠用來解決自己所面臨的問題, 假如該方案適合用來解決問題, 還必須判斷能否能直接引用該方案, 有沒有適法性的問題. \n 假如既存方案可以解決問題, 且沒有適法性問題, 接下來應該思考, 能否獨力或結合其他團隊成員,  打造工具 , 讓使用者爾後碰到相同或類似問題, 可以更方便解題. \n W8 配合電腦輔助設計室所建立的  portable_hybrid.7z  (任何人都可以下載 - 此即 academic portfolio 中的服務) 可攜程式環境系統. \n portable_hybrid.7z  下載檔案約 350MB, 解開壓縮檔案後約為 1GB. \n 註: portable_hybrid.7z 是儲存在 2021fall At mde 的 GDrive 中. \n 是的, 重點在於您希望建立何種樣貌的學習歷程檔案? \n 假如進入大學學習是一段  Journey , 您希望踏上一段什麼樣子的旅程? \n 是讓人回味無窮? 抑或悔不當初? \n 何謂\xa0 academic   portfolio  (學習歷程檔案)? \n academic 可翻譯為學術的, 而 portfolio 指的是文件檔案夾, 可以引申為資料或檔案的組合, 假如又將這些資料的創建時間納入, 也可以將 portfolio 稱為歷程檔案組合, 所以 academic portfolio 就被翻譯為學術歷程檔案, 或學習歷程檔案, 在此  academic portofolio 特稱為大學時期與學習有關的歷程檔案組合 . \n academic portfolio 內容就是專業核心課程學習歷程的綜合呈現, 未來無論是求職或研究所推甄, 學習歷程檔案就是可用來評量申請者是否符合過關要求的重要指標. \n https://www.uts.edu.au/research-and-teaching/learning-and-teaching/scholarship-and-research/scholarship-learning-and-teaching/developing-academic-portfolio \n A portfolio supports you in your role as an academic by creating a record of your reflection (反思), development (開發, 拓展) and achievements (成果, 成就) over time. You may like to use aspects (面向) of your portfolio to provide evidence (證據) for formal probation (試用期) review, progression (進展) or promotion (升職) processes. \n https://www.hr.uwa.edu.au/working/academic/portfolio \n An Academic Portfolio is a summary of your major activities and accomplishments (成果), documenting the nature and extent of your contributions (貢獻) as well as your role and achievements. It has three major components (or folios), supported by your Curriculum Vitae (CV). \n 這裡指的三項學術歷程檔案, 就是國內在評量大學老師的所謂教學 (包括教課與學習), 研究 (research) 與服務等三項工作內容的組合. \n 教學 - 課程內容有沒有與時俱進, 逐步提升內容與教學方法, 以符合時代要求. \n 研究 - 對於所開設的課程或與業界相關的研究主題, 是否持續鑽研探究. \n 服務 - 是否將教學與研究成果, 實際提供給公眾使用. \n https://www.utu.fi/en/university/come-work-with-us/academic-portfolio \n A good portfolio is comprehensive ((範圍)全面), brief ((內容)簡短), and concise. ((用詞)簡潔) The recommended maximum length of the academic portfolios used in filling the teaching vacancies at the University is five pages. Faculties may give more detailed information about the quality and quantity of appendixes. Portfolios are created for a variety of purposes, the most important situation being recruitment (招募人才). Portfolio is also an excellent way for members of personnel to cultivate their expertise (培養專業知識), and it can also be used in development discussions and when building the work unit’s job description. \n https://www.huronconsultinggroup.com/insights/academic-portfolio-data-collaboration-teach \n Successfully managing an academic portfolio requires continued (持續) collaboration (協同) and use of data. There are many stakeholders involved in the process and emphasizing the importance of collaboration will not only assist portfolio management, but also an institution’s mission (使命) and vision (願景). Institutional and academic leaders can align conversations about strategic activities and information management to strengthen long-range academic planning. Additionally, as leaders review program-level costs and data as a part of academic portfolio management, they will be able to identify opportunities to reallocate funding to support resource-intensive academic programs. Better access to this data will also increase visibility on learning, progression and graduation outcomes. As the relationships and collaboration between academic leadership and faculty strengthen, decision making (決策), resource allocation (資源配置) and data analysis will improve. \n 這是計算機程式課程 2021 Fall 的作業倉儲與網站 template \n \n demo 學號與帳號: mdecourse \n 網站倉儲:  https://github.com/mdecourse/cp2021_hw \n 網站連結:  https://mde.tw/cp2021_hw \n 其他與個人或作業相關資料說明或介紹: \n mdecourse 所屬的實驗室:  https://mde.tw', 'tags': '', 'url': 'About.html'}, {'title': 'portable_hybrid', 'text': 'W8 配合電腦輔助設計室所建立的  portable_hybrid.7z  (任何人都可以下載 - 此即 academic portfolio 中的服務) 可攜程式環境系統. \n 註: portable_hybrid.7z 是儲存在 2021fall At mde 的 GDrive 中. \n portable_hybrid.7z  下載檔案約 350MB, 解開壓縮檔案後約為 1GB. \n 此一版本並未包含  https://www.fossil-scm.org , 當各組建立 Fossil SCM server 時必須自行在 Windows 與 Ubuntu 操作系統中下載當時最新的 Fossil SCM 版本. \n portable_hybrid 可攜程式系統介紹: \n 此版本是配合電腦輔助設計室 2021 年 Fall 更新電腦後所製作, 其中的 start_hybrid_ipv4.bat 與 start_hybrid_ipv6.bat可以使用電腦 C 槽 SSD 中的 C:\\2021_cadlab_portable\\data\\Python395 與 C:\\2021_cadlab_portable\\data\\portablegit_2.31.1, 取得較快的執行速度. \n 但也同時在 portable_hybrid\\data 目錄中自帶這兩個目錄檔案, 因此也可以透過 start_ipv4.bat 與 start_ipv6.bat 使用隨身碟中的 Python 與 Git. \n 支援程式語言: Python 3.9.5 與 ANSI C ( Tiny C Compiler ). \n 提供 GitExtensions, Sharex, kdiff3, Zoomit, ProcessExplorer, ProcessMonitor, Wink, Solvespae 等工具. \n', 'tags': '', 'url': 'portable_hybrid.html'}, {'title': 'ANSI C', 'text': 'portable_hybrid.7z  下載檔案約 350MB, 解開壓縮檔案後約為 1GB. \n portable_hybrid 可攜程式系統中帶有  Tiny C Compiler , 可以用來類解譯 (pseudo interpret)  ANSI C  程式. \n 但是屬於 Web-based 前端的 Brython 程式, 若要與屬於伺服器後端的  ANSI C  程式結合, 還需要透過伺服器端的 CPython 程式出來整合 (例如:  https://github.com/mdecourse/python-tinycc ) \n 利用 portable_hybrid 中的 Tiny C compiler 解題: \n 利用  Differential Evoluation  (差分進化演算法), 以  ANSI C  程式語言編寫適應方程式的最大化或最小化演算: \n 程式碼位於 portable_hybrid\\data\\tmp\\c_ex\\volume_ex1.c (即  volume_in_de_ex1.c ), 以  portable_hybrid.7z  中的  SciTE  編輯器開啟後, 使用 Tools -> Go 即可執行運算. \n 同樣採 DE 演算法的 Python 程式範例為 portable_hybrid\\data\\tmp\\c_ex\\volume_ex1.py (即  volume_in_de_ex1.py ), 也可以直接以  portable_hybrid.7z  中的  SciTE  編輯器開啟後, 使用 Tools -> Go 執行運算. \n 此一採 固定表面積的紙盒體積最大化 運算範例 volume_ex1.py 程式碼, 若改名為  volume_in_de_ex1.py  後, 可以直接利用  https://mde.tw/cp2021_hw/content/run.html  直接在網際介面中 執行 .  此 volume_in_de_ex1.py 的原始作者為 李孟恭  ( https://github.com/kmollee/algorithm/blob/master/de.py ) \n 至於透過物件導向 (Object-oriented) 將 ANSI-C 與 CPython 結合的教材, 可以參考 高煥堂 寫的 物件導向 ANSI-C 與 Python 的結合紙本書  (lw-oopc:  https://sourceforge.net/projects/lwoopc/  即 light-weight object-oriented programming in C, 也就是輕量物件導向 C 程式語言). \n 從  lw-oopc 的簡介  以及 升級版 lw-oopc 原始碼 中, 則可以進一步對 ANSI-C 在嵌入式 (embedded) 系統上的應用有所了解.', 'tags': '', 'url': 'ANSI C.html'}, {'title': 'C-notes', 'text': '可以直接利用  portable_hybrid.7z  執行  Programming for Problem Solving using C.pdf  中的 C 程式範例. \n 其他參考書: \n PROGRAMMING_FOR_PROBLEM_SOLVING_IN_C.pdf \n programming_and_data_structure_in_c.pdf \n thcbook.pdf \n INTRODUCTION TO NUMERICAL ANALYSIS WITH C PROGRAMS.pdf', 'tags': '', 'url': 'C-notes.html'}, {'title': 'Pyslvs-UI', 'text': '簡介: \n Pyslvs-UI  是一套利用 Python 3 與 PyQt5 建立的平面機構模擬與合成系統. 機構模擬與合成的主要核心包括  Python-Solvespace  幾何約束求解程式庫、 tinycadlib  三角幾何函式程式庫、 Metaheruistics  演算程式庫、 bgfs  幾何約束求解程式庫、 topologic  類型合成程式庫、 number  數目合成程式庫等. \n 其中,\xa0 Metaheruistics  演算程式庫包含 Real-coded Genetic Algorithm ( RGA )、Differential Evolution ( DE ) 與 Firefly Algorithm ( Firefly ) 等三種, 用於平面機構尺寸合成演算. \n 開發歷程: \n Pyslvs-UI  的開發源自 2008 年, 從最基本的實數基因演算法在平面機構的應用研究起步, 期間歷經下列研究者的貢獻: \n \n 李孟恭, 2015,  Django 網際框架在平面四連桿尺寸合成系統上的應用 \n 李玠廷, 2013,  網際程式框架在平面連桿機構尺寸合成系統上的應用 \n 陳威任, 2013, 符號式平面滑塊機構應用研究 \n 謝政良, 2012,  網際雙自由度凸輪機構尺寸合成系統 \n 黃竣鉉, 2012,  網際符號輔助軸接連桿機構之基因演算法尺寸合成系統 \n 謝智翔, 2012,  網際史都華平台機構逆運動學分析與模擬 \n 許哲菘, 2010,  網際六軸機械臂系統的逆運動學分析與模擬 \n 葉岱錦, 2009,  基因演算法在網際機構合成系統上的應用 \n \n 過程中, 於 2015 年由 李孟恭 整合上述論文所開發的三種演算法, 完成  Cython  格式的  RGA 、 DE  與  Firefly  演算法程式庫後. 並自 2016 年起由 張元 將上述尺寸合成演算法, 搭配利用  SWIG  技術, 將原本只能用於 Python 2 的  Python-Solvespace  倉儲, 改寫為能結合 PyQt5 圖形介面使用的  Python-Solvespace  程式庫作為另一項開端. 再搭配平面機構中的數目合成與類型合成等程式庫後, 成為目前的\xa0 Pyslvs-UI  平面機構模擬與合成套件. \n Pyslvs-UI 開發紀要 \n 2015 年 4 月 - 由 李孟恭 以  Cython  技術, 完成三個 尺寸合成演算法 程式庫. \n 2016 年 7 月 - 由 張元 完成 Python 3 格式的  Python-Solvespace  程式庫. \n 2016 年 12 月- 由 張元 結合 PyQt5 與演算程式庫, 完成第一代  Pyslvs-UI 套件. \n 2019 年 7 月 - 由張元完成 平面多連桿機構之合成與應用 碩士論文. \n', 'tags': '', 'url': 'Pyslvs-UI.html'}, {'title': 'GitExtensions', 'text': '下載尚未個人化設定的 GitExtensions \n 利用 GitExtensions 輸入提交訊息時, 若出現字串 highlight 表示提交字串可能不會被 Github 接受, 導致  Github Pages 轉檔錯誤 , 網頁將無法正常連線. 修正錯誤後, 以正確的提交字串 push, 可以得到正確的 轉檔結果 . \n GitExtensions 設定: \n \n GitExtensions Git config setup: \n \n 以下將請已經完成 GitExtensions 與 SSH 結合使用的學員製作"GitExtensions 導引" Wink, 說明詳細的設定流程. \n', 'tags': '', 'url': 'GitExtensions.html'}, {'title': 'run', 'text': '這個頁面利用  Brython  程式庫, 讓使用者可以直接在瀏覽器中執行 Python 語法程式 (與 CPython  語法比較 ). Brython 程式庫以 Javascript 編寫, 能在頁面 置入 html,  並 結合 第三方 Javascript 程式庫, 進行  2D  與  3D  繪圖應用. (範例:  https://imvickykumar999.github.io/Chrome-Extension/Brython%20Snake/snake.html  ) \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'run.html'}, {'title': 'runsrc', 'text': 'run 頁面在動態網頁的 html: \n run.txt \n \n', 'tags': '', 'url': 'runsrc.html'}, {'title': 'Snake', 'text': '\n \n \n \n  啟動 Brython  \n \n \n \n \n Score: 0 \n \n High Score: 0 \n \n Instructions \n \n \n \n', 'tags': '', 'url': 'Snake.html'}, {'title': 'SSH', 'text': 'SSH 指 Secure Shell:  https://en.wikipedia.org/wiki/Secure_Shell \n 而 Shell 則指:  https://en.wikipedia.org/wiki/Shell_(computing) , 若在 Ｗindows 操作系統, 可以將 Shell 解釋為提供使用者在命令列視窗 (Dos command Windows) 執行指令的解譯程式. 也就是說 Shell 其實是一組程式, 讓使用者可以透過指令操控電腦. \n 所以 SSH 就是能夠透過加密網路傳輸協議, 讓使用者安全地透過網路與電腦進行溝通的 Shell. \n 在 Mac 與 Linux 操作系統中, 可以利用 Terminal 或 X-Terminal, 以 ssh 執行 client 端程式, 透過遠端登入的方式執行 Shell commands. 在 Windows 操作系統則可以利用 Putty 作為 ssh 的 client 端, 透過網路以加密傳輸遠端登入至其他執行 sshd (即 Shell server) 的電腦.', 'tags': '', 'url': 'SSH.html'}, {'title': 'Network', 'text': '當電腦輔助設計室中, 將連外網路由 NAT 轉為直接連到 Backbone 後, 可能因為電腦中所安裝的套件問題, 會因直接網路連外, 導致外部電腦試圖透過 ARP 快取進行破壞攻擊, 因此必須設法中止此一攻擊, 並且能利用 IPv6 網路協定上網. \n \n 面對此一網路威脅的處理方法, 就是在純 IPv6 網路協定下, 讓電腦中所安裝的潛在問題套件無法透過系統的 Proxy 設定連網: \n \n 關閉 Windows 操作系統的網路代理主機設定 \n 關閉 IPv4 網路協定 \n 設定 IPv6 的 DNS 伺服器, 2001:b000:168::1 \n 針對瀏覽器與 git 客戶端, 分別設定能從純 IPv6 轉往只支援 IPv4 網路協定的代理主機. \n \n git 的網路代理主機設定 git config --global http.proxy  http://[Proxy_ip_address]:3128 \n Computer Networks: \n 相關開放電子書:  http://intronetworks.cs.luc.edu/current1/html/ \n 其他格式:  https://open.umn.edu/opentextbooks/textbooks/an-introduction-to-computer-networks \n', 'tags': '', 'url': 'Network.html'}, {'title': 'Fossil Server', 'text': '從 W7 分組後, 各組在電腦輔助設計室中將會有一台 Windows 10 電腦的第三磁區並未保護, 因此可以用來建立 Fossil SCM Server, 此 Server 的功能可以用來與 Github 結合使用, 分別用來管理各組所共同開發的 Brython 程式, 並且提供 Forum, Chat 與 Documentation (用來伺服課程的靜態網頁) 功能. \n 在 Windows 操作系統建立 Fossil SCM 所需要的工具: \n \n Fossil SCM - Fossil SCM server 主體. \n Stunnel - https 代理主機. \n Nginx - WWW 伺服器, 主要將 http 連線跳轉至 https. \n NSSM - 將 Fossil server, Stunnel, Nginx 執行程式設為 service. \n \n 步驟 1: 從  https://fossil-scm.org/home/uv/download.html  下載 fossil.exe, 存入可攜系統 y:\\ \n 步驟 2: 從  https://www.stunnel.org/downloads.html  下載 stunnel 套件, 存入可攜系統 y:\\ \n 步驟 3: 從  https://nginx.org/en/download.html  下載 nginx 套件, 存入可攜系統 y:\\ \n 步驟 4: 從  https://nssm.cc/download  下載 nssm.exe, 存入可攜系統 y:\\ \n 建立 c:\\pj2022\\repo 目錄, 啟動可攜系統後, 進入 repo 目錄後, 以 fossil init pj2022.fossil 建立 pj2022.fossil 倉儲檔案. \n 接著以 fossil user password Account Password -R pj2022.fossil 指令, 針對帳號為 Account 的 pj2022.fossil 管理者, 更改倉儲管理密碼為 Password. \n 若要將 Fossil Server 在 port 9000 啟動, 執行 fossil server c:\\pj2022\\repo\\pj2022.fossil --port 9000 後, 就可以利用瀏覽器開啟  http://localhost:9000  中的 pj2022.fossil 網際伺服器. \n 接著設定 Stunnel 的 stunnel.conf 為: \n ; TLS front-end to a web server\n[https]\naccept  = Server_domain_name:443\nconnect = 9000\ncert = localhost.crt\nkey = localhost.key\nTIMEOUTclose = 0 \n 以 y:\\stunnel.exe 執行後, 必須將前面採 http 協定傳送 port 9000 資料的 Fossil SCM server 指令改為: \n fossil server c:\\pj2022\\repo\\pj2022.fossil --port 9000 --https \n 表示要送出 https 格式封包讓 Stunnel 對外連線. \n 待 Fossil SCM server 與 Stunnel 都正常運作後, 就可以透過瀏覽器以  https://Server_domain_name  連接至 pj2022.fossil 的網際倉儲伺服器. \n', 'tags': '', 'url': 'Fossil Server.html'}, {'title': 'HW1', 'text': 'HW1 - 網際動畫與 touch typing 佔學期成績 20%. \n 何謂 Secure Shell? \n HTTPS:  https://en.wikipedia.org/wiki/HTTPS \n Transport Layer Security:  https://en.wikipedia.org/wiki/Transport_Layer_Security \n SSH:  https://en.wikipedia.org/wiki/Secure_Shell \n 如何利用 SSH 協定將倉儲改版內容推送到 Github: \n SSH 了沒 \n 以下為 Github 所提供有關 Token 與 SSH 的說明資料: \n Github Personal Token:  https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ \n Github SSH:  https://docs.github.com/en/authentication/connecting-to-github-with-ssh \n Using the SSH protocol, you can connect and authenticate to remote servers and services. With SSH keys, you can connect to GitHub without supplying your username and personal access token at each visit. \n GnuPG  (GNU Privacy Guard): \n 如何利用  https://www.gpg4win.org/  保全數位檔案傳送. \n https://gnupg.org/gph/en/manual.pdf \n https://gnupg.org/documentation/manuals/gnupg.pdf \n https://www.gpg4win.org/doc/en/gpg4win-compendium.html \n 由於數位檔案很容易被改造, 因此在製作數位檔案內容時, 在 Windows 平台上可以利用 Gpg4win 加密或保全. \n GnuPG 加密 \n GnuPG 保全 - 在網站提供檔案下載前, 利用 Gpg4win 對檔案進行數位簽章 \n 在執行作業之前, 必須要仔細閱讀作業要求內容, 想像一下作業指定者為何要提出此一作業, 其目的為何, 然後再根據要求逐一安排時間完成. \n 作業一的主題為網際動畫與 touch typing, 並要求學員要至 Github 申請帳號, 並將作業內容直接在課程網頁中執行 Brython (Browser Python), 完成後將程式碼放到各學員 Github 帳號下的 Gist 區域, 然後再將作業連結提交至課程網頁倉儲的 Discussion 區. \n 另外, 除了要修改 Task1 頁面中動畫的程式外, 還要求使用者從 Cango 頁面, 將程式中的網際按鈕放到頁面, 以便控制程式的執行或中斷. \n 假如直翻 Browser Python 就是瀏覽器上的 Python, 除了能夠在瀏覽器上執行的 Python, 還有沒有其他環境上能夠執行的 Python？ \n 例如: 1994 年剛被開發出來的 Python 是用 C 寫的, 所以稱為 CPython, 可以在各種操作系統平台上執行, 而且累積二十幾年的發展, 已經擁有許多的程式庫, 讓 CPython 可以解決許多工程問題. \n 除了 CPython 與 Brython (以 Javascript 編寫) 之外, 還有以 Java 編寫的  Jython , 以 .NET 技術編寫的  ironPython , 還有以 Rust 編寫的  RustPython  或是以 Python 編寫的  PyPy , 每一種 Python 都有其特色, 在適合的環境中可用來解決各種不同的問題. \n \n 當我們看到  https://mde.tw/cp2021/content/Task1.html  這個頁面中的程式執行時, 應該會好奇, 為何能夠直接在瀏覽器的網頁上, 直接點擊 Run, Python 程式就能執行, 在頁面中畫靜態與動態的圖型. \n 這種在網頁上畫圖的依據是採用 HTML5 規格中的  Canvas API . 原本是設計給 Javascript 在網頁上繪圖, 透過 Canvas API 程式語法, 就可以透過 Brython 在頁面中繪圖. \n \n HW1 - 網際動畫與 touch typing 佔學期成績 20%. \n HW1 必須在 2021.10.20 22:00 之前完成 . \n HW1 具體項目成果回報區 將於 2021.09.23 開啟, 於  2021.10.20 22:00 關閉 \n \n 請至  https://github.com  申請 Github 帳號後, 至  https://mde.tw/cp2021/content/Task1.html \xa0 頁面, 將左右碰撞移動的紅色方塊, 改為先移動到水平畫面中心點位置後, 接著上下碰撞移動. \n 請將 1. 的程式碼存入個人 Gist 區 ( 說明 ). \n 請在 1. 的程式中, 加入與  Cango 頁面  Fourbar 程式碼相同功能的啟動按鈕, 讓使用者可以利用按鈕啟動或中斷紅色方塊上下碰撞移動. 完成後請將程式碼存入個人 Gist 區. \n 請在 Gist 檔案編輯區, 利用鍵盤輸入  https://docs.github.com/en/github/writing-on-github/editing-and-sharing-content-with-gists/creating-gists#about-gists  中的這段英文內容, 請利用手機計時, 大概需要多少時間? 請將此段練習打字的內容與所需時間存入 Gist 檔案中. \n 請至少練習 key in 這段英文內容三次, 然後看看是否已經了解如何透過電腦鍵盤 touch typing? \n 接下來請利用中文輸入  https://ithelp.ithome.com.tw/articles/10206233  的第一段中文說明, 請利用手機計時, 大概需要多少時間? \n \n \n HW1-1 : 將左右碰撞移動的紅色方塊, 改為先移動到水平畫面中心點位置後, 接著上下碰撞移動. \n HW1-2 : 加入與  Cango 頁面  Fourbar 程式碼相同功能的啟動按鈕, 讓使用者可以利用按鈕啟動或中斷紅色方塊上下碰撞移動. 完成後請將程式碼存入個人 Gist 區. \n 程式碼說明: \n HW1-1.py \n Brython browser 模組 \n Brython browser html 模組 \n Brython enable/disable event \n Python 函式定義與呼叫 \n Python 縮排 (indentation) \n 字串 (string) \n 數列 (list) \n if 判斷式 \n 在 Python 關鍵字中, None, True 與 False 第一個字母都必須是大寫 \n 在 python.org 網站範圍搜尋 global 關鍵字 \n 有關 Python 的 global:  https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python \n # 從 browser 導入 html\nfrom browser import html\n# 從 browser 導入 document 並且對應為 doc\nfrom browser import document as doc\n# 導入 browser.timer\nimport browser.timer\n\n# 定義一個 game() 函式\ndef game():\n    """\n利用 global 關鍵字 將 px, py 與 speed \n設為可在函式內改變對應內容 \n(意即, 這三個定義在函式外的全域變數,  \n在函式中分別位於等號左邊)\n    """\n    global px, py, speed\n    ctx.clearRect(px, py, width, height)\n    ctx.fillStyle = "red"\n    if px < canvas.width/2:\n        px += speed\n    else:\n        py -= speed\n    \n    if px < 0 or (px + width) > canvas.width:\n        speed = -speed\n    if py < 0 or (py + height) > canvas.height:\n        speed = -speed\n    \n    ctx.fillRect(px, py, width, height)\n\n"""\na variable declared outside of the function or \nin global scope is known as a global variable. \nThis means that a global variable can be accessed \ninside or outside of the function.\n"""\n\ncanvas = html.CANVAS(width = 600, height = 600)\ncanvas.id = "game-board"\nbrython_div = doc["brython_div"]\nbrython_div <= canvas\nctx = canvas.getContext("2d")\npx = 0\npy = 50\nwidth = 20\nheight = 20\nspeed = 2\n\nbrowser.timer.set_interval(game, 10) \n HW1-2.py \n from browser import document as doc\nfrom browser import timer\nfrom browser import html\nimport math\n\n# 建立 game-board canvas\n\ncanvas = html.CANVAS(width = 300, height = 300)\ncanvas.id = "game-board"\nbrython_div = doc["brython_div"]\nbrython_div <= canvas\nctx = canvas.getContext("2d")\npx = 0\npy = 50\nwidth = 20\nheight = 20\nspeed = 2\n\n# 建立 button\nbrython_div <= html.BUTTON("啟動", id="power")\n \ndef game():\n    global px, py, speed\n    ctx.clearRect(px, py, width, height)\n    ctx.fillStyle = "red"\n    if px < canvas.width/2:\n        px += speed\n    else:\n        py -= speed\n    \n    if px < 0 or (px + width) > canvas.width:\n        speed = -speed\n    if py < 0 or (py + height) > canvas.height:\n        speed = -speed\n    \n    ctx.fillRect(px, py, width, height)\n \n \n# 將 anim 設為 None\nanim = None\n \ndef launchAnimation(ev):\n    global anim\n    # 初始啟動, anim 為 None\n    if anim is None:\n        # 每 0.1 秒執行一次 draw 函式繪圖\n        anim = timer.set_interval(game, 10)\n        # 初始啟動後, 按鈕文字轉為"暫停"\n        doc[\'power\'].text = \'暫停\'\n    elif anim == \'hold\':\n        # 當 anim 為 \'hold\' 表示曾經暫停後的啟動, 因此持續以 set_interval() 持續旋轉, 且將 power 文字轉為"暫停"\n        anim = timer.set_interval(game, 10)\n        doc[\'power\'].text = \'暫停\'\n    else:\n        # 初始啟動後, 使用者再按 power, 此時 anim 非 None 也不是 \'hold\', 因此會執行 clear_interval() 暫停\n        # 且將 anim 變數設為 \'hold\', 且 power 文字轉為"繼續"\n        timer.clear_interval(anim)\n        anim = \'hold\'\n        doc[\'power\'].text = \'繼續\'\n\n \ndoc["power"].bind("click", launchAnimation)\n \n \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'Token', 'text': '當你建立 Github 帳號後就可以利用 Gist 儲存資料或程式碼, 且可以利用  https://mde.tw/cp2021/content/run.html  來執行 Brython 程式. \n 在 run.html 執行 Brython 程式, 可以使用下列三種方法: \n \n 直接連線至  https://mde.tw/cp2021/content/run.html  將 Brython 程式寫在編輯區, 然後按下 Run. \n 將 Brython 程式存在 Gist, 利用 run.html?src=Gist_URL, run.html 中的 Javascript 就會導入此 Gist 程式執行. \n 將 Brython 程式寫在 run.html 頁面中, 然後安排其中的 Javascript 或 Brython 程式導入執行. \n \n 而上述三種程式的執行若更動 run.html 或取 run.html?src=Gist_URL 連結放入頁面, 都必須要在各自的 cp2021_hw倉儲的動態網站中改版, 轉為靜態網頁內容, 然後新增提交並推送至 Github, 建立個人 Github 帳號對應的Personal Token, 就可以放入近端倉儲 .git/config 中的 origin url 帳號密碼區, 然後將改版資料推送到 Github. \n 利用 Personal Token 字串 push 改版資料的步驟: \n \n 至 Github 帳號 settings 下的開發者區域建立能夠更動 repo 的權限, 並且決定此 Token 權限的使用期限. \n 將此 Token 字串放入對應倉儲 .git/config 檔案中的 origin url=https://Token_String@github.com/帳號/cp2021_hw.git \n \n', 'tags': '', 'url': 'Token.html'}, {'title': 'SSH push', 'text': 'Github 帳號用戶除了可以利用 Personal Token push 改版資料外, 也可以利用 SSH keys 將改版資料 push 到 Github. 詳細說明可以參考  SSH 了沒 . \n 以下說明 SSH push 操作步驟: \n \n 下載 putty 安裝套件, 安裝後, 將 putty 目錄取出放入隨身碟 y:\\ 目錄中 (也就是 data 目錄中). \n 修改 start_ipv4.bat 或 start_ipv6.bat, 設定 GIT_SSH 變數, 指向 putty 套件目錄中的 plink.exe, 表示隨後的 git push 將透過 putty 中的 session 設定連網. 亦即在 start_ipv4.bat 或 start_ipv6.bat 檔案中加入  set GIT_SSH=%Disk%:\\putty\\plink.exe \n 利用 putty 中的 puttygen.exe 建立 keys, 按下 generate 後, 在 puttygen 執行視窗上方以滑鼠隨意移動, 以便利用滑位置隨機建立 keys, 完成後在原先滑鼠移動位置所出現的 key, 即為 OpenSSH 格式的 public key 內容, 而此一內容就是要放到 Github 帳號 settings 中的 SSH and GPG keys 中的 new SSH key 欄位區 (此為用戶所設定的 public key). \n 接下來要利用 puttygen 建立 keys 視窗右下的 save private key, 將此一 .ppk private key 存到 home_ipv4 或 \n \xa0home_ipv6 目錄下. \n 接下來要啟動 putty.exe 建立一個能夠連線至 github.com 網站的 session, 此 session 可以取名為 github.com, 也可以取其它名稱, 只是這個 session 名稱, 將會成為 git 指令與 plink.exe 連結使用後的連線 session 名稱. 而在設定此連線到 github.com 的 session, 在無需設定 proxy 的情況下, 只需要指定 SSH - AUTH 中的 private key 存放位置. \n 最後則是配合採用 SSH 協定連線, 必須要修改倉儲中 .git/config url 的連線協定, 從原先的  https://github.com/帳號/cp2021_hw.git  改為  git@github.com:帳號/cp2021_hw.git  也就是採用 git 作為連線到 putty session 名稱 github.com, 然後採用 github 帳號檢查是否此 private key 與前述放入 Github SSH and GPG keys 的 public 成對, 若匹配成功, 則使用者利用上述的 SSH 就可以執行將改版內容 push 到 Github. \n \n 上述採 SSH 流程 push 改版資料的基本概念為: \n \n 啟動隨身系統時就告知 GIT_SSH 變數, 要利用 putty 工具作為 SSH 連線的 client 端. \n 接著要建立 OpenSSH 格式的 public key, 在 Github 帳號下完成登記. \n 至於近端則要儲存與送到 Github public 對應的 putty 格式 private key, 因為設定 putty session 時會用到此 private key. \n 接著就是利用這把近端的 private key, 建立一個能夠採 SSH 協定連線到 Github 的 putty session, 此 session 其實只有三個基本屬性: 連線主機符號名稱, 也就是 github.com, 連線 session 名稱, 以及與 session 對應的 private key 位置. \n 最後就是修改要採 SSH push 的倉儲中 .git/config url 連線協定, 從 https 改為 SSH, 並以 git 作為登入帳號, 且宣告所要使用的 putty session 名稱與登入後要驗證 key 權限的 session 名稱. \n \n \n', 'tags': '', 'url': 'SSH push.html'}, {'title': 'HW2', 'text': '在電腦輔助設計的新電腦上可以利用 USB 隨身碟設定所謂 Hybrid 可攜程式系統, 也就是 Python 與 Portablegit 使用 c:\\2021_portable_kmol\\data 目錄中的檔案, 而將 start_ipv4.bat, start_ipv6.bat, data, wscite, tmp 等目錄放在 USB 隨身碟. \n 在電腦輔助設計室中, 以 USB 隨身碟啟動的 start_ipv4.bat 檔案內容:  start_ipv4_hybrid.txt \n 在動態系統中加入 run 頁面的 html 原始碼:  run.txt \n 當你建立 Github 帳號後就可以利用 Gist 儲存資料或程式碼, 且可以利用  https://mde.tw/cp2021/content/run.html  來執行 Brython 程式. \n 在  run.html  執行 Brython 程式, 可以使用下列三種方法: \n \n 直接連線至  https://mde.tw/cp2021/content/run.html  將 Brython 程式寫在編輯區, 然後按下 Run. \n 將 Brython 程式存在 Gist, 利用 run.html?src=Gist_URL,  run.html  中的 Javascript 就會導入此 Gist 程式執行. \n 將 Brython 程式寫在  run.html  頁面 html 超文件中, 然後安排其中的 Javascript 或 Brython 程式導入執行. \n \n 建立可攜程式系統時必須了解 start_ipv4.bat 或 start_ipv6.bat 中的所有指令用法: \n 以電腦輔助設計室中使用新電腦的 USB 可攜 Hybrid 設定 start_ipv4.bat 為例. \n @echo off\nset Disk=y\nsubst %Disk%: "data"\n\nset Local=C:\\2021_cadlab_portable\\data\n\n%Disk%:\n\nset HomePath=%Disk%:\\home_ipv4\nset HomeDrive=%Disk%:\\home_ipv4\nset Home=%Disk%:\\home_ipv4\nset USERPROFILE=%Disk%:\\home_ipv4\n\nREM 將系統 Python 程式的 io 設為 utf-8\nset PYTHONIOENCODING="utf-8"\n\nset PYTHONPATH=%Local%\\Python395\\DLLs;%Local%\\Python395\\Lib;%Local%\\Python395\\Lib\\site-packages;\n\nset PYTHONHOME=%Local%\\Python395\n\nREM 使用 putty 設定 git ssh 連線\nset GIT_SSH=%Disk%:\\putty\\plink.exe\n\nREM 設定跟 Python 有關的命令搜尋路徑\nset path_python=%Local%\\Python395;%Local%\\Python395\\Scripts;\nset path_portablegit=%Local%\\portablegit_2.31.1\\bin;\n\npath=%Disk%:;%path_python%;%path_portablegit%;%path%;\n\nREM ref: https://drive.google.com/file/d/1S0XYN-1MKxo0KFYxs0pFTcTrr8NL4n1b/view\n\nREM REGEDIT.EXE /S %Disk%:\\putty_github_com.reg;\n\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\n\nstart /MIN %Disk%:\\wScite\\SciTE.exe\nstart /MIN %Disk%:\\wScite\\SciTE.exe\n\nExit \n 因為電腦 C:\\ 中存放的可攜系統位於 C:\\2021_cadlab_portable\\data, 因此將此路徑設為 Local 變數, 然後與 Python 即 Portablegit 有關的路徑都使用 %Local% 變數設定. \n 有關 SSH push 設定必須將 putty 系統登錄檔案匯出後, 在啟動隨身系統時載入所需設定.  putty 設定登錄檔案匯出與匯入說明影片 . \n Windows 指令: \n echo off , 而放在前面的  @ 指令說明 . \n set : 設定 環境變數 . \n HomePath, HomeDrive, Home, USERPROFILE 都屬於 Windows 操作系統的 環境變數 . \n HW1-1 : 將左右碰撞移動的紅色方塊, 改為先移動到水平畫面中心點位置後, 接著上下碰撞移動. \n HW1-2 : 加入與  Cango 頁面  Fourbar 程式碼相同功能的啟動按鈕, 讓使用者可以利用按鈕啟動或中斷紅色方塊上下碰撞移動. 完成後請將程式碼存入個人 Gist 區. \n \n HW2 - 可攜程式系統與個人網站佔學期成績 20%. \n HW2 必須在 2021.11.03 22:00 之前完成. \n HW2 具體項目成果回報區 將於 2021.10.25 開啟, 於  2021.11.03 22:00 關閉 \n 可攜程式系統與 Python 範例程式收集整理 \n 1. 請準備一個至少 64 GB 大小的 USB 3.0 以上隨身碟 (或外接 SSD), 根據  Task2  中的說明, 建立自己的可攜程式系統.\xa0 \n 2. 請登入 Github 帳號後, 連線至  https://github.com/mdecourse/cp2021_hw  後, 透過  Use this template  按鈕建立自己的 cp2021_hw 倉儲. 並至該倉儲的 Settings -> Pages -> Source 將 main 分支設為 Github Pages 的 root (也就是選擇將倉儲的 main 分支設為對應網站的根目錄). \n 3. 請將 HW1 與 HW2 的作業內容登錄至個人的 cp2021_hw 倉儲與網站中. (學習如何透過 git 指令修改倉儲中的版本內容) \n 4. 請在個人作業網站的 HW2 區域下增設一個 H2 頁面, 將該網頁標題命名為 run, 可以如  run  頁面中的內容, 並且利用此頁面收集 Python 範例程式. (例如: 可自動執行的貪食蛇:  https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439/raw/2160a12b9fec9707a120a383ed5d38b9b78a02cf/snake.py  將  https://gist.github.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439  作為  https://mde.tw/cp2021/content/run.html  頁面中 src 變數的值, 就可以在頁面中導入程式碼並執行) \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'Python', 'text': 'https://www.freecodecamp.org/news/want-to-learn-python-heres-our-free-4-hour-interactive-course/ \n https://introcs.cs.princeton.edu/python/home/ \n', 'tags': '', 'url': 'Python.html'}, {'title': 'run1', 'text': '第一種在網頁執行 Brython 程式的方法, 是使用者在網際程式編輯區輸入 Brython 程式碼, 必須手動按下 Run 才能執行. 本網頁 html 的  run1.txt . \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'run1.html'}, {'title': 'run2', 'text': '第二種執行 Brython 程式的方法, 是將 Brython 程式存在 Gist, 利用 run.html?src=Gist_URL,  run.html  中的 Javascript 就會導入此 Gist 程式並自動執行. \n 按下導入 cango_gear1.py 且自動執行 \n 上述連結為: \n https://mde.tw/cp2021_hw/content/run.html?src=https://gist.githubusercontent.com/mdecourse/e896a4705a95ac8cc4147b355b0e87ef/raw/8954b8280c524c5781dc3c0b3565bc489d3aa3a3/cango_gear1.py \n run.html 後的變數為 ?src= https://gist.githubusercontent.com/mdecourse/e896a4705a95ac8cc4147b355b0e87ef/raw/8954b8280c524c5781dc3c0b3565bc489d3aa3a3/cango_gear1.py \n 其中的  e896a4705a95ac8cc4147b355b0e87ef  為 gist 檔案群組編號, 而隨後的  8954b8280c524c5781dc3c0b3565bc489d3aa3a3  則為 cango_gear1.py 的版次編號. \n 本網頁的 html  run2.txt . \n', 'tags': '', 'url': 'run2.html'}, {'title': 'run3', 'text': '第三種在網頁中執行 Brython 的方法, 是直接將程式寫在 html 網頁中執行. 本頁面的 html 程式碼為  run3.txt . \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'run3.html'}, {'title': 'Server', 'text': '在電腦輔助設計室中的 11 台舊電腦, 因為第三磁區並沒有保護, 因此可以設定為 Flask 與 Fossil SCM server 主機. \n 六台新電腦中的一台可以透過  remote desktop  連線至各分組的伺服器進行設定. \n 至於在 Windows 10 中可以利用  https://nssm.cc/  將應用程式設為 service. \n Windows 10 中的動態課程網頁系統: \n 以 waitress 執行 cmsimde/wsgi.py: \n python -m pip install waitress \n 建立一個 waitress_server.py: \n # 執行前, 必須要先利用 python -m pip install waitress 安裝 wairess 模組\n# 接著從 waitress 導入 serve\nfrom waitress import serve\n \n# 導入 flaskapp\n"""\n在不將 cmsimde 目錄納入 sys.path 搜尋路徑時, \n可以複製一份 cmsimde/nocache.py 至倉儲目錄. \n或者將 cmsimde 納入系統搜尋路徑中, \n且必須放在導入 flaskapp  之前\n"""\nimport sys\nsys.path.append("./cmsimde")\nfrom cmsimde import flaskapp\n \n# run flaskapp.app with production waitress\nserve(flaskapp.app, host=\'0.0.0.0\', port=5000, url_scheme=\'https\') \n 接著先除去 url_scheme=\'https\' 後以 python waitress_server.py 執行. cmsimde 主機將可透過瀏覽器連結  http://server_ip:5000 \n 接下來則可以利用  Stunnel  作為 https 代理主機, 作為  http://server_ip:5000  與外部瀏覽器連接的代理轉接者. \n stunnel.conf 設定內容: \n [https]\naccept = 8443\nconnect = 5000\ncert = fullchain.pem\nkey = privkey.pem\nTIMEOUTclose = 0 \n cmsimde 系統的靜態網頁則可以利用  Nginx  伺服. \n Nginx 在 Ubuntu /etc/nginx/sites-available/default 中的設定: \n server {\n    listen 80;\n    listen [::]:80;\n    root /home/wcm2021/newcms;\n    index index.html;\n   \n    location /static {\n        alias /home/wcm2021/newcms/cmsimde/static/;\n    }\n   \n    location /downloads {\n        alias /home/wcm2021/newcms/downloads/;\n    }\n   \n    location /images {\n        alias /home/wcm2021/newcms/images/;\n    }\n   \n    location / {\n            try_files $uri $uri/ =404;\n    } \n       \n    location /blog {\n        alias /home/wcm2021/cmsimfly/blog/;\n    }\n   \n    location /reveal {\n        alias /home/wcm2021/cmsimfly/reveal/;\n    }\n}\n   \nserver {\n    listen 443 ssl;\n    #listen [::]:443 ssl ipv6only=on;\n    \n    location /static {\n        alias /home/wcm2021/cmsimfly/static/;\n    }\n    \n    location / {\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8080;\n    }\n    \n    #server_name ipv4_ip; \n    #ssl on;\n    ssl_certificate /etc/stunnel/localhost.crt;\n    ssl_certificate_key /etc/stunnel/localhost.key;\n    ssl_session_timeout 5m;\n    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";\n    ssl_prefer_server_ciphers on;\n    try_files $uri $uri/ =404;\n}\n    \nserver {\n    #listen 89 default_server;\n    #listen [::]:89 default_server ipv6only=on;\n    \n    listen 8943 ssl;\n    #listen [::]:8943 ssl ipv6only=on;\n    \n    location /static {\n        alias /home/wcm2021/cmsimfly2/static/;\n    }\n    \n    location / {\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8082;\n    }\n    \n    #server_name ipv4_ip;\n    #ssl on;\n    ssl_certificate /etc/stunnel/localhost.crt;\n    ssl_certificate_key /etc/stunnel/localhost.key;\n    ssl_session_timeout 5m;\n    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";\n    ssl_prefer_server_ciphers on;\n    try_files $uri $uri/ =404;\n}\n   \nserver {\n    #listen 88 default_server;\n    #listen [::]:88 default_server ipv6only=on;\n    \n    listen 8843 ssl;\n    #listen [::]:8843 ssl ipv6only=on;\n    \n    location /static {\n        alias /home/wcm2021/newcms/cmsimde/static/;\n    }\n    \n    location / {\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8081;\n    }\n    \n    #server_name ipv4_ip;\n    #ssl on;\n    ssl_certificate /etc/stunnel/localhost.crt;\n    ssl_certificate_key /etc/stunnel/localhost.key;\n    ssl_session_timeout 5m;\n    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";\n    ssl_prefer_server_ciphers on;\n    try_files $uri $uri/ =404;\n} \n \n', 'tags': '', 'url': 'Server.html'}, {'title': 'HW3', 'text': 'HW3 - AI 貪食蛇佔學期成績 30%. \n HW3 必須在 2021.12.22 22:00 之前完成. \n HW3 具體項目成果回報區 將於 2021.11.09 開啟, 於  2021.12.22 22:00 關閉 \n 網際貪食蛇的逆襲, 誰的 自動執行貪食蛇 能夠破紀錄? 目前直覺貪食蛇紀錄為 45 節 (除了蛇身節數外, 應該還要置入出現紅色標的物後的總完食時間). \n 手動執行貪食蛇 程式說明與整理. \n 自動執行貪食蛇 程式說明與整理. \n 自動執行貪食蛇 程式的改進. \n 參考資料: \n 可用於學習 Python 超過 1000 頁的  free 電子書 , 也可以與 教科書導讀 一起配合研讀, 學習如何利用 Python 解題. \n 文獻探討:  https://towardsdatascience.com/training-a-snake-game-ai-a-literature-review-1cdddcd1862f \n 閱讀  ai_snake_in_python.pdf  (長知識:-) 後, 將  snake_pathfinding_ai_curses.py  改為 Brython 相容程式碼 \n https://github.com/mdecourse/snake_pathfinding_ai  (convert to Brython no.1) \n https://github.com/mdecourse/SnakeSolver  (convert to Brython no.2) \n https://github.com/mdecourse/Snaky  (convert to Brython no.3) \n 以 Python 實作演算法 \n ai_snake_in_python.pdf \xa0( https://hawstein.com/2013/04/15/snake-ai/ ,  https://github.com/mdecourse/snake-ai , 改為 Python3 後  snake_pathfinding_ai_curses.py  ( on Gist ), 有關  Python curses.pdf , 官方  curses 模組說明 ) \n https://github.com/mdecourse/slitherin \n https://github.com/mdecourse/python-game-snake \n https://www.geeksforgeeks.org/ai-driven-snake-game-using-deep-q-learning/ \n https://craighaber.github.io/AI-for-Snake-Game/website_files/index.html \n https://www.python-course.eu/snake_in_python.php \n https://techitsmart.ca/2020/05/18/teaching-ai-to-play-snake-using-python/ \n https://mde.tw/cp2021/content/Task3.html \n Brython snake 原始來源:  https://medium.com/swlh/sick-of-javascript-just-use-browser-python-4b9679efe08b \n https://github.com/mdecourse/snake-Q-Learning \n https://towardsdatascience.com/teaching-a-computer-how-to-play-snake-with-q-learning-93d0a316ddc0 \n https://github.com/mdecourse/SnakeQlearning \n https://medium.com/@italohdc/learnsnake-teaching-an-ai-to-play-snake-using-reinforcement-learning-q-learning-b63ac23dfdd1 \n https://towardsdatascience.com/snake-played-by-a-deep-reinforcement-learning-agent-53f2c4331d36 \n https://www.geeksforgeeks.org/ai-driven-snake-game-using-deep-q-learning/ \n https://www3.hs-albsig.de/wordpress/point2pointmotion/2020/10/09/deep-reinforcement-learning-with-the-snake-game/ \n 2016_Exploration of Reinforcement Learning to SNAKE.pdf \n train_a_snake_with_reinforceme.pdf \n https://medium.com/@hugo.sjoberg88/using-reinforcement-learning-and-q-learning-to-play-snake-28423dd49e9b \n https://github.com/mdecourse/Snake-Reinforcement-Learning \n Autonomous-Agents-in-Snake-Game-via-Deep-Reinforcement-Learning.pdf \n 延伸應用: \n \n \n \n \n https://github.com/mdecourse/snake-ai-pytorch', 'tags': '', 'url': 'HW3.html'}, {'title': 'Algorithms', 'text': '演算法 -  https://web.ntnu.edu.tw/~algo/Algorithm.html \n Data Structure in Python.pdf \n Data Structure and Algorithm in Cpp.pdf \n Algorithm.pdf \n https://introcs.cs.princeton.edu/python/40algorithms/ \n VisualGo  (Visualization of Algorithm) \n Principles of Algorithmic Problem Solving.pdf \n Foundation of Computer Science:  http://infolab.stanford.edu/~ullman/focs.html \n Open Data Structures.pdf \n Free Programming books:  https://ebookfoundation.github.io/free-programming-books/ \n Python 的資料結構與演算法  ( 線上課程 ) \n https://www.louisbourque.ca/AI-Snake-Game/ \n https://hawstein.com/2013/04/15/snake-ai/ \n https://en.wikipedia.org/wiki/Depth-first_search \n https://favtutor.com/blogs/depth-first-search-python \n https://github.com/mdecourse/snake_pathfinding_ai \n https://super9.space/archives/1562 \n https://reposhub.com/python/game-development/memoiry-Snaky.html \n https://github.com/mdecourse/python-game-snake \n https://www.geeksforgeeks.org/ai-driven-snake-game-using-deep-q-learning/ \n https://craighaber.github.io/AI-for-Snake-Game/website_files/index.html \n https://www.python-course.eu/snake_in_python.php \n https://techitsmart.ca/2020/05/18/teaching-ai-to-play-snake-using-python/ \n https://www.geeksforgeeks.org/snake-ladder-problem-2/   \n 資料結構: \n https://www.aupress.ca/books/120226-open-data-structures/ \n', 'tags': '', 'url': 'Algorithms.html'}, {'title': 'Path Finding', 'text': 'https://github.com/mdecourse/snake_pathfinding_ai \n snake_ai_bfs.py \n 何謂 BFS ( Breadth-First Search ) algorithm? \n Breadth-first search (BFS, 廣度優先搜尋) is an algorithm for searching a tree data structure for a node that satisfies a given property. It starts at the tree root and explores all nodes at the present depth prior to moving on to the nodes at the next depth level. Extra memory, usually a queue, is needed to keep track of the child nodes that were encountered but not yet explored. \n 以 Python 實現 BFS \n graph = {\n  \'A\' : [\'B\',\'C\'],\n  \'B\' : [\'D\', \'E\'],\n  \'C\' : [\'F\'],\n  \'D\' : [],\n  \'E\' : [\'F\'],\n  \'F\' : []\n}\n\nvisited = [] # List to keep track of visited nodes.\nqueue = []     #Initialize a queue\n\ndef bfs(visited, graph, node):\n  visited.append(node)\n  queue.append(node)\n\n  while queue:\n    s = queue.pop(0) \n    print (s, end = " ") \n\n    for neighbour in graph[s]:\n      if neighbour not in visited:\n        visited.append(neighbour)\n        queue.append(neighbour)\n\n# Driver Code\nbfs(visited, graph, \'A\') \n Lines 3-10: The illustrated graph is represented using an adjacency list. An easy way to do this in Python is to use a dictionary data structure, where each vertex has a stored list of its adjacent nodes. Line 12: visited is a list that is used to keep track of visited nodes. Line 13: queue is a list that is used to keep track of nodes currently in the queue. \n Line 29: The arguments of the bfs function are the visited list, the graph in the form of a dictionary, and the starting node A. \n Lines 15-26: bfs follows the algorithm described above: \n It checks and appends the starting node to the visited list and the queue. \n Then, while the queue contains elements, it keeps taking out nodes from the queue, appends the neighbors of that node to the queue if they are unvisited, and marks them as visited. \n This continues until the queue is empty.', 'tags': '', 'url': 'Path Finding.html'}, {'title': 'ML in Brython', 'text': 'https://www.analyticsvidhya.com/blog/2021/07/python-on-frontend-ml-models-web-interface-with-brython/ \n https://github.com/mdecourse/Brython-ML \xa0', 'tags': '', 'url': 'ML in Brython.html'}, {'title': 'Math', 'text': 'https://open.umn.edu/opentextbooks/textbooks/precalculus-an-investigation-of-functions \n', 'tags': '', 'url': 'Math.html'}, {'title': 'Final Project', 'text': 'Final Project 佔學期成績 30% \n Final Project 必須在 2022.01.05 22:00 之前完成 . \n Final Project 具體項目成果回報區 將於 2021.11.09 開啟, 於  2022.01.05 22:00 關閉 \n 利用 Brython 寫一個會 令人想玩 的網際遊戲. \n 參考章節: \n \n 專題摘要 \n 資料蒐集 \n 設計動機 \n 設計方法 \n 結果與討論 \n 附錄 \n \n 參考資料: \n https://github.com/collections/web-games \n https://github.com/topics/web-game \n https://github.com/topics/browser-game \n https://github.com/leereilly/games \n https://bmsleight.github.io/brython-blocks/ \n https://github.com/mdecourse/brython-blocks', 'tags': '', 'url': 'Final Project.html'}]};